
UART_ECHO_FIRMWARE_TASK_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a84  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bb4  08000bbc  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bb4  08000bb4  00001bbc  2**0
                  CONTENTS
  4 .ARM          00000000  08000bb4  08000bb4  00001bbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bb4  08000bbc  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb4  08000bb4  00001bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bb8  08000bb8  00001bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000000  08000bbc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08000bbc  00002424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000189a  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a2  00000000  00000000  0000347f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00003d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000101  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ddc  00000000  00000000  00003fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002661  00000000  00000000  00014d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057e17  00000000  00000000  000173de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006f1f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000464  00000000  00000000  0006f238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0006f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b9c 	.word	0x08000b9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b9c 	.word	0x08000b9c

08000170 <EEPROM_Write>:

/* Function Definitions */

//This function can write multiple bytes(Size) into the eeprom
void EEPROM_Write (uint8_t Address, uint16_t Reg, uint8_t *buffer, uint16_t size)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	60ba      	str	r2, [r7, #8]
 8000178:	461a      	mov	r2, r3
 800017a:	4603      	mov	r3, r0
 800017c:	73fb      	strb	r3, [r7, #15]
 800017e:	460b      	mov	r3, r1
 8000180:	81bb      	strh	r3, [r7, #12]
 8000182:	4613      	mov	r3, r2
 8000184:	80fb      	strh	r3, [r7, #6]
	uint8_t Reg_Array[2];

	Reg_Array[0] = (uint8_t)((Reg & 0xFF00) >> 8);
 8000186:	89bb      	ldrh	r3, [r7, #12]
 8000188:	0a1b      	lsrs	r3, r3, #8
 800018a:	b29b      	uxth	r3, r3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	753b      	strb	r3, [r7, #20]
	Reg_Array[1] = (uint8_t)(Reg & 0x00FF);
 8000190:	89bb      	ldrh	r3, [r7, #12]
 8000192:	b2db      	uxtb	r3, r3
 8000194:	757b      	strb	r3, [r7, #21]

	I2C_Start ();
 8000196:	f000 f885 	bl	80002a4 <I2C_Start>
	I2C_Address (Address);
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f8bb 	bl	8000318 <I2C_Address>
	I2C_WriteMulti(Reg_Array, buffer, size);
 80001a2:	88fa      	ldrh	r2, [r7, #6]
 80001a4:	f107 0314 	add.w	r3, r7, #20
 80001a8:	68b9      	ldr	r1, [r7, #8]
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f8e0 	bl	8000370 <I2C_WriteMulti>
	I2C_Stop ();
 80001b0:	f000 f8d0 	bl	8000354 <I2C_Stop>
}
 80001b4:	bf00      	nop
 80001b6:	3718      	adds	r7, #24
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <EEPROM_Read>:

//This function can read multiple bytes(Size) from the eeprom
void EEPROM_Read (uint8_t Address, uint16_t Reg, uint8_t *buffer, uint16_t size)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60ba      	str	r2, [r7, #8]
 80001c4:	461a      	mov	r2, r3
 80001c6:	4603      	mov	r3, r0
 80001c8:	73fb      	strb	r3, [r7, #15]
 80001ca:	460b      	mov	r3, r1
 80001cc:	81bb      	strh	r3, [r7, #12]
 80001ce:	4613      	mov	r3, r2
 80001d0:	80fb      	strh	r3, [r7, #6]
	uint8_t RegH = (uint8_t)((Reg & 0xFF00) >> 8);
 80001d2:	89bb      	ldrh	r3, [r7, #12]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	75fb      	strb	r3, [r7, #23]
	uint8_t RegL = (uint8_t)(Reg & 0x00FF);
 80001da:	89bb      	ldrh	r3, [r7, #12]
 80001dc:	75bb      	strb	r3, [r7, #22]

	I2C_Start ();
 80001de:	f000 f861 	bl	80002a4 <I2C_Start>
	I2C_Address (Address);
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f897 	bl	8000318 <I2C_Address>
	I2C_Write (RegH);
 80001ea:	7dfb      	ldrb	r3, [r7, #23]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f875 	bl	80002dc <I2C_Write>
	I2C_Write (RegL);
 80001f2:	7dbb      	ldrb	r3, [r7, #22]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f871 	bl	80002dc <I2C_Write>
	I2C_Start ();  // repeated start
 80001fa:	f000 f853 	bl	80002a4 <I2C_Start>
	I2C_Read (Address+0x01, buffer, size);
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	3301      	adds	r3, #1
 8000202:	b2db      	uxtb	r3, r3
 8000204:	88fa      	ldrh	r2, [r7, #6]
 8000206:	68b9      	ldr	r1, [r7, #8]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8f9 	bl	8000400 <I2C_Read>
	I2C_Stop ();
 800020e:	f000 f8a1 	bl	8000354 <I2C_Stop>
}
 8000212:	bf00      	nop
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <I2C_Config>:
#include "I2C.h"
#include "stm32f103xb.h"

/* Function Definitions */
void I2C_Config(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 21);    // enable I2C CLOCK
 8000220:	4b1c      	ldr	r3, [pc, #112]	@ (8000294 <I2C_Config+0x78>)
 8000222:	69db      	ldr	r3, [r3, #28]
 8000224:	4a1b      	ldr	r2, [pc, #108]	@ (8000294 <I2C_Config+0x78>)
 8000226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800022a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1 << 3);    // Enable GPIOB CLOCK
 800022c:	4b19      	ldr	r3, [pc, #100]	@ (8000294 <I2C_Config+0x78>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <I2C_Config+0x78>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6193      	str	r3, [r2, #24]

	AFIO->MAPR &= ~(1 << 1);				// Configure the I2C PINs for ALternate Functions
 8000238:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <I2C_Config+0x7c>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a16      	ldr	r2, [pc, #88]	@ (8000298 <I2C_Config+0x7c>)
 800023e:	f023 0302 	bic.w	r3, r3, #2
 8000242:	6053      	str	r3, [r2, #4]
	GPIOB->CRL |= (1 << 24) | (1 << 26) | (1 << 27) | (1 << 28) | (1 << 30) | (1 << 31);    // output open drain
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <I2C_Config+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a14      	ldr	r2, [pc, #80]	@ (800029c <I2C_Config+0x80>)
 800024a:	f043 435d 	orr.w	r3, r3, #3707764736	@ 0xdd000000
 800024e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= (1 << 15);		// Reset the I2C
 8000250:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <I2C_Config+0x84>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <I2C_Config+0x84>)
 8000256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800025a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <I2C_Config+0x84>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <I2C_Config+0x84>)
 8000262:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000266:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (8 << 0);    // PCLK1 FREQUENCY in MHz
 8000268:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <I2C_Config+0x84>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a0c      	ldr	r2, [pc, #48]	@ (80002a0 <I2C_Config+0x84>)
 800026e:	f043 0308 	orr.w	r3, r3, #8
 8000272:	6053      	str	r3, [r2, #4]

	I2C1->CCR = 40 << 0;		// Configure the clock control register
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <I2C_Config+0x84>)
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	61da      	str	r2, [r3, #28]

	I2C1->TRISE = 9;		// Configure the rise time register
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <I2C_Config+0x84>)
 800027c:	2209      	movs	r2, #9
 800027e:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= (1 << 0);    // Enable I2C Peripheral
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <I2C_Config+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a06      	ldr	r2, [pc, #24]	@ (80002a0 <I2C_Config+0x84>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000
 8000298:	40010000 	.word	0x40010000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40005400 	.word	0x40005400

080002a4 <I2C_Start>:

void I2C_Start(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 10);    // Enable the ACK
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <I2C_Start+0x34>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <I2C_Start+0x34>)
 80002ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002b2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1 << 8);    // Generate START
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <I2C_Start+0x34>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <I2C_Start+0x34>)
 80002ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002be:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1 << 0)));    // Wait fror SB bit to set
 80002c0:	bf00      	nop
 80002c2:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <I2C_Start+0x34>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <I2C_Start+0x1e>
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40005400 	.word	0x40005400

080002dc <I2C_Write>:

void I2C_Write(uint8_t data)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & (1 << 7)));    // wait for TXE bit to set
 80002e6:	bf00      	nop
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <I2C_Write+0x38>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <I2C_Write+0xc>
	I2C1->DR = data;
 80002f4:	4a07      	ldr	r2, [pc, #28]	@ (8000314 <I2C_Write+0x38>)
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1 << 2)));    // wait for BTF bit to set
 80002fa:	bf00      	nop
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <I2C_Write+0x38>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <I2C_Write+0x20>
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40005400 	.word	0x40005400

08000318 <I2C_Address>:

void I2C_Address(uint8_t Address)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = Address;    //  send the address
 8000322:	4a0b      	ldr	r2, [pc, #44]	@ (8000350 <I2C_Address+0x38>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1 << 1)));    // wait for ADDR bit to set
 8000328:	bf00      	nop
 800032a:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <I2C_Address+0x38>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <I2C_Address+0x12>
	uint8_t temp = I2C1->SR1 | I2C1->SR2;    // read SR1 and SR2 to clear the ADDR bit
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <I2C_Address+0x38>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <I2C_Address+0x38>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4313      	orrs	r3, r2
 8000344:	73fb      	strb	r3, [r7, #15]
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40005400 	.word	0x40005400

08000354 <I2C_Stop>:

void I2C_Stop(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9);    // Stop I2C
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <I2C_Stop+0x18>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a03      	ldr	r2, [pc, #12]	@ (800036c <I2C_Stop+0x18>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40005400 	.word	0x40005400

08000370 <I2C_WriteMulti>:

void I2C_WriteMulti(uint8_t* Reg_Array, uint8_t *data, uint16_t size)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	4613      	mov	r3, r2
 800037c:	80fb      	strh	r3, [r7, #6]
	while (!(I2C1->SR1 & (1 << 7)));    // wait for TXE bit to set
 800037e:	bf00      	nop
 8000380:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <I2C_WriteMulti+0x8c>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f9      	beq.n	8000380 <I2C_WriteMulti+0x10>

	while (!(I2C1->SR1 & (1 << 7)));    // wait for TXE bit to set
 800038c:	bf00      	nop
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <I2C_WriteMulti+0x8c>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <I2C_WriteMulti+0x1e>
	I2C1->DR = (uint32_t)Reg_Array[0];    // send data
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003a0:	611a      	str	r2, [r3, #16]

	while (!(I2C1->SR1 & (1 << 7)));    // wait for TXE bit to set
 80003a2:	bf00      	nop
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f9      	beq.n	80003a4 <I2C_WriteMulti+0x34>
	I2C1->DR = (uint32_t)Reg_Array[1];    // send data
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3301      	adds	r3, #1
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003b8:	611a      	str	r2, [r3, #16]

	while (size)
 80003ba:	e00f      	b.n	80003dc <I2C_WriteMulti+0x6c>
	{
		while (!(I2C1->SR1 & (1 << 7)));    // wait for TXE bit to set
 80003bc:	bf00      	nop
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <I2C_WriteMulti+0x4e>
		I2C1->DR = (uint32_t)*data++;    // send data
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	60ba      	str	r2, [r7, #8]
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003d4:	611a      	str	r2, [r3, #16]
		size--;
 80003d6:	88fb      	ldrh	r3, [r7, #6]
 80003d8:	3b01      	subs	r3, #1
 80003da:	80fb      	strh	r3, [r7, #6]
	while (size)
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1ec      	bne.n	80003bc <I2C_WriteMulti+0x4c>
	}

	while (!(I2C1->SR1 & (1 << 2)));    // wait for BTF to set
 80003e2:	bf00      	nop
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <I2C_WriteMulti+0x8c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <I2C_WriteMulti+0x74>
}
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40005400 	.word	0x40005400

08000400 <I2C_Read>:

void I2C_Read(uint8_t Address, uint8_t *buffer, uint16_t size)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
 800040c:	4613      	mov	r3, r2
 800040e:	80bb      	strh	r3, [r7, #4]
	int remaining = size;
 8000410:	88bb      	ldrh	r3, [r7, #4]
 8000412:	60fb      	str	r3, [r7, #12]

	if(size == 1)
 8000414:	88bb      	ldrh	r3, [r7, #4]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d12f      	bne.n	800047a <I2C_Read+0x7a>
	{
		I2C1->DR = Address;    //  send the address
 800041a:	4a4b      	ldr	r2, [pc, #300]	@ (8000548 <I2C_Read+0x148>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)));    // wait for ADDR bit to set
 8000420:	bf00      	nop
 8000422:	4b49      	ldr	r3, [pc, #292]	@ (8000548 <I2C_Read+0x148>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <I2C_Read+0x22>

		I2C1->CR1 &= ~(1 << 10);    // clear the ACK bit
 800042e:	4b46      	ldr	r3, [pc, #280]	@ (8000548 <I2C_Read+0x148>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a45      	ldr	r2, [pc, #276]	@ (8000548 <I2C_Read+0x148>)
 8000434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000438:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2;    // read SR1 and SR2 to clear the ADDR bit
 800043a:	4b43      	ldr	r3, [pc, #268]	@ (8000548 <I2C_Read+0x148>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b41      	ldr	r3, [pc, #260]	@ (8000548 <I2C_Read+0x148>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4313      	orrs	r3, r2
 8000448:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1 << 9);    // Stop I2C
 800044a:	4b3f      	ldr	r3, [pc, #252]	@ (8000548 <I2C_Read+0x148>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a3e      	ldr	r2, [pc, #248]	@ (8000548 <I2C_Read+0x148>)
 8000450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000454:	6013      	str	r3, [r2, #0]

		while (!(I2C1->SR1 & (1 << 6)));    // wait for RxNE to set
 8000456:	bf00      	nop
 8000458:	4b3b      	ldr	r3, [pc, #236]	@ (8000548 <I2C_Read+0x148>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <I2C_Read+0x58>

		buffer[size - remaining] = I2C1->DR;    // Read the data from the DATA REGISTER
 8000464:	4b38      	ldr	r3, [pc, #224]	@ (8000548 <I2C_Read+0x148>)
 8000466:	6919      	ldr	r1, [r3, #16]
 8000468:	88ba      	ldrh	r2, [r7, #4]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	461a      	mov	r2, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	4413      	add	r3, r2
 8000474:	b2ca      	uxtb	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]

		while (!(I2C1->SR1 & (1 << 6)));    // wait for RxNE to set
		buffer[size - remaining] = I2C1->DR;    // copy the data into the buffer
	}

}
 8000478:	e060      	b.n	800053c <I2C_Read+0x13c>
		I2C1->DR = Address;    //  send the address
 800047a:	4a33      	ldr	r2, [pc, #204]	@ (8000548 <I2C_Read+0x148>)
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)));    // wait for ADDR bit to set
 8000480:	bf00      	nop
 8000482:	4b31      	ldr	r3, [pc, #196]	@ (8000548 <I2C_Read+0x148>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f9      	beq.n	8000482 <I2C_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2;    // read SR1 and SR2 to clear the ADDR bit
 800048e:	4b2e      	ldr	r3, [pc, #184]	@ (8000548 <I2C_Read+0x148>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b2c      	ldr	r3, [pc, #176]	@ (8000548 <I2C_Read+0x148>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4313      	orrs	r3, r2
 800049c:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2)
 800049e:	e019      	b.n	80004d4 <I2C_Read+0xd4>
			while (!(I2C1->SR1 & (1 << 6)));    // wait for RxNE to set
 80004a0:	bf00      	nop
 80004a2:	4b29      	ldr	r3, [pc, #164]	@ (8000548 <I2C_Read+0x148>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <I2C_Read+0xa2>
			buffer[size - remaining] = I2C1->DR;    // copy the data into the buffer
 80004ae:	4b26      	ldr	r3, [pc, #152]	@ (8000548 <I2C_Read+0x148>)
 80004b0:	6919      	ldr	r1, [r3, #16]
 80004b2:	88ba      	ldrh	r2, [r7, #4]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	4413      	add	r3, r2
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1 << 10;    // Set the ACK bit to Acknowledge the data received
 80004c2:	4b21      	ldr	r3, [pc, #132]	@ (8000548 <I2C_Read+0x148>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a20      	ldr	r2, [pc, #128]	@ (8000548 <I2C_Read+0x148>)
 80004c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004cc:	6013      	str	r3, [r2, #0]
			remaining--;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
		while (remaining > 2)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	dce2      	bgt.n	80004a0 <I2C_Read+0xa0>
		while (!(I2C1->SR1 & (1 << 6)));    // wait for RxNE to set
 80004da:	bf00      	nop
 80004dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <I2C_Read+0x148>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <I2C_Read+0xdc>
		buffer[size - remaining] = I2C1->DR;
 80004e8:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <I2C_Read+0x148>)
 80004ea:	6919      	ldr	r1, [r3, #16]
 80004ec:	88ba      	ldrh	r2, [r7, #4]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	b2ca      	uxtb	r2, r1
 80004fa:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1 << 10);    // clear the ACK bit
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <I2C_Read+0x148>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <I2C_Read+0x148>)
 8000502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000506:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1 << 9);    // Stop I2C
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <I2C_Read+0x148>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <I2C_Read+0x148>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000512:	6013      	str	r3, [r2, #0]
		remaining--;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3b01      	subs	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1 << 6)));    // wait for RxNE to set
 800051a:	bf00      	nop
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <I2C_Read+0x148>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <I2C_Read+0x11c>
		buffer[size - remaining] = I2C1->DR;    // copy the data into the buffer
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <I2C_Read+0x148>)
 800052a:	6919      	ldr	r1, [r3, #16]
 800052c:	88ba      	ldrh	r2, [r7, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	461a      	mov	r2, r3
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	4413      	add	r3, r2
 8000538:	b2ca      	uxtb	r2, r1
 800053a:	701a      	strb	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40005400 	.word	0x40005400

0800054c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	db0a      	blt.n	8000576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	490c      	ldr	r1, [pc, #48]	@ (8000598 <__NVIC_SetPriority+0x4c>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	0112      	lsls	r2, r2, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	440b      	add	r3, r1
 8000570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000574:	e00a      	b.n	800058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4908      	ldr	r1, [pc, #32]	@ (800059c <__NVIC_SetPriority+0x50>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	3b04      	subs	r3, #4
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	440b      	add	r3, r1
 800058a:	761a      	strb	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <SysTick_Handler>:

/* Function Definitions */

//This is Systick Interrupt Handler, this is called every millisecond, need to implement overflow spill condition of msTicks.
void SysTick_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	msTicks++;    // Increment the millisecond counter
 80005a4:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <SysTick_Handler+0x18>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a03      	ldr	r2, [pc, #12]	@ (80005b8 <SysTick_Handler+0x18>)
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000001c 	.word	0x2000001c

080005bc <SysTick_Init>:

//Initializing Systick Timer which is a part of ARM Cortex M-3 processor core.
void SysTick_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	// Reload value to trigger every 1 ms (8 MHz / 1000 = 8000)
	SysTick->LOAD = 8000 - 1;    // Set reload register
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <SysTick_Init+0x28>)
 80005c2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005c6:	605a      	str	r2, [r3, #4]

	// Set the priority of the SysTick interrupt (optional)
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);    // Set lowest priority
 80005c8:	210f      	movs	r1, #15
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f7ff ffbd 	bl	800054c <__NVIC_SetPriority>

	// Set the SysTick counter value to 0
	SysTick->VAL = 0;
 80005d2:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <SysTick_Init+0x28>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]

	// Enable SysTick: Enable timer, enable interrupt, select processor clock
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 80005d8:	4b02      	ldr	r3, [pc, #8]	@ (80005e4 <SysTick_Init+0x28>)
 80005da:	2207      	movs	r2, #7
 80005dc:	601a      	str	r2, [r3, #0]
			| SysTick_CTRL_ENABLE_Msk;
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	e000e010 	.word	0xe000e010

080005e8 <Delay_ms>:

//This functions provides blocking-mode delay. It inputs delay in milliseconds.
void Delay_ms(uint32_t delay)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint32_t currentTicks = msTicks;    // Capture the current value of msTicks
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <Delay_ms+0x2c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
	while ((msTicks - currentTicks) < delay);    // Wait until the delay time has passed
 80005f6:	bf00      	nop
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <Delay_ms+0x2c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	d8f8      	bhi.n	80005f8 <Delay_ms+0x10>
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000001c 	.word	0x2000001c

08000618 <__NVIC_EnableIRQ>:
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	db0b      	blt.n	8000642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 021f 	and.w	r2, r3, #31
 8000630:	4906      	ldr	r1, [pc, #24]	@ (800064c <__NVIC_EnableIRQ+0x34>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	2001      	movs	r0, #1
 800063a:	fa00 f202 	lsl.w	r2, r0, r2
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100

08000650 <uart_init>:
/* Header Includes */
#include"UART.h"

/* Function Definitions Starts */
void uart_init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2) | (1 << 14) | (1 << 0);    // Enable AFIO, GPIOA, and USART1 clocks
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <uart_init+0x5c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <uart_init+0x5c>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	f043 0305 	orr.w	r3, r3, #5
 8000662:	6193      	str	r3, [r2, #24]
	AFIO->MAPR &= ~AFIO_MAPR_USART1_REMAP;    // Clear remap for USART1
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <uart_init+0x60>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a11      	ldr	r2, [pc, #68]	@ (80006b0 <uart_init+0x60>)
 800066a:	f023 0304 	bic.w	r3, r3, #4
 800066e:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(0xF << 4);    // Clear bits for PA9
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <uart_init+0x64>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <uart_init+0x64>)
 8000676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800067a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xA << 4);    // Set as alternate function push-pull
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <uart_init+0x64>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <uart_init+0x64>)
 8000682:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000686:	6053      	str	r3, [r2, #4]
	USART1->BRR = 0xD05;    // Set baud rate (assuming 8 MHz clock, 2400 baud). 8 MHz / 2400 = 0xD05
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <uart_init+0x68>)
 800068a:	f640 5205 	movw	r2, #3333	@ 0xd05
 800068e:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= (1 << 3) | (1 << 13) | (1 << 2) | (1 << 5);    // Enable transmitter (TE) Enable USART (UE) etc.
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <uart_init+0x68>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <uart_init+0x68>)
 8000696:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069a:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 800069e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(USART1_IRQn);		//Enable USART1 Interrupt
 80006a0:	2025      	movs	r0, #37	@ 0x25
 80006a2:	f7ff ffb9 	bl	8000618 <__NVIC_EnableIRQ>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40013800 	.word	0x40013800

080006bc <uart_send_char>:

// Function to send a character over USART1
void uart_send_char(char c)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & (1 << 7)));	//Wait until transmit data register is empty
 80006c6:	bf00      	nop
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <uart_send_char+0x38>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f9      	beq.n	80006c8 <uart_send_char+0xc>
	USART1->DR = c;
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <uart_send_char+0x38>)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	6053      	str	r3, [r2, #4]

	while (!(USART1->SR & (1 << 6)));    // Wait for TC flag (Transmission Complete)
 80006da:	bf00      	nop
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <uart_send_char+0x38>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f9      	beq.n	80006dc <uart_send_char+0x20>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40013800 	.word	0x40013800

080006f8 <USART1_IRQHandler>:

//USART1 Interrupt Handler. Whenever interrupt is generated, this ISR is called.
void USART1_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	if( USART1->SR & (1 << 5))
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <USART1_IRQHandler+0x54>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01f      	beq.n	8000748 <USART1_IRQHandler+0x50>
	{
		uart_data_rx = (uint8_t) USART1->DR;
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <USART1_IRQHandler+0x54>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <USART1_IRQHandler+0x58>)
 8000710:	701a      	strb	r2, [r3, #0]

		if(uart_data_rx == 0x0A || uart_data_rx == 0x0D || (uart_data_rx >= 0x20 && uart_data_rx <= 0x7E))
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <USART1_IRQHandler+0x58>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b0a      	cmp	r3, #10
 800071a:	d00e      	beq.n	800073a <USART1_IRQHandler+0x42>
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <USART1_IRQHandler+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b0d      	cmp	r3, #13
 8000724:	d009      	beq.n	800073a <USART1_IRQHandler+0x42>
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <USART1_IRQHandler+0x58>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b1f      	cmp	r3, #31
 800072e:	d90b      	bls.n	8000748 <USART1_IRQHandler+0x50>
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <USART1_IRQHandler+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b7e      	cmp	r3, #126	@ 0x7e
 8000738:	d806      	bhi.n	8000748 <USART1_IRQHandler+0x50>
		{
			writeBuffer(&rb, uart_data_rx);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <USART1_IRQHandler+0x58>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <USART1_IRQHandler+0x5c>)
 8000744:	f000 f95a 	bl	80009fc <writeBuffer>
		}
		//uart_send_char(uart_data_rx);
	}
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40013800 	.word	0x40013800
 8000750:	20000020 	.word	0x20000020
 8000754:	20000024 	.word	0x20000024

08000758 <UART_Transmit>:

//This function can transmit multiple (Size) bytes over USART1
void UART_Transmit(uint8_t *data, uint32_t size)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < size; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e009      	b.n	800077c <UART_Transmit+0x24>
	{
		uart_send_char(data[i]);
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffa3 	bl	80006bc <uart_send_char>
	for(uint32_t i = 0; i < size; i++)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3f1      	bcc.n	8000768 <UART_Transmit+0x10>
	}
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <__NVIC_EnableIRQ>:
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <__NVIC_EnableIRQ+0x34>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_DisableIRQ>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db12      	blt.n	8000800 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	490a      	ldr	r1, [pc, #40]	@ (800080c <__NVIC_DisableIRQ+0x44>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	3320      	adds	r3, #32
 80007f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fa:	f3bf 8f6f 	isb	sy
}
 80007fe:	bf00      	nop
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <main>:
volatile RingBuffer rb;


/* Main Function Start */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000816:	af00      	add	r7, sp, #0
	SysTick_Init();		//Initialinzing Systick to enable ms delay
 8000818:	f7ff fed0 	bl	80005bc <SysTick_Init>

	uart_init();		//Initializing UART1 @2400 Baud Rate on pins PA9(Tx) & PA10(Rx). Also Enabling UART Rx Interrupt.
 800081c:	f7ff ff18 	bl	8000650 <uart_init>

	I2C_Config();		//Initailizing I2C1 @100Khz on pins PB6(SCL) & PB7(SDA)
 8000820:	f7ff fcfc 	bl	800021c <I2C_Config>

	initBuffer(&rb);		//Initializing Ring buffer to store data received over UART1 Rx Interrupt(from PC)
 8000824:	4857      	ldr	r0, [pc, #348]	@ (8000984 <main+0x174>)
 8000826:	f000 f8af 	bl	8000988 <initBuffer>

	uint16_t eeprom_address = 0x0000;		//EEPROM Register/Memory Location Address
 800082a:	2300      	movs	r3, #0
 800082c:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	snprintf((char*)BUFF, sizeof(BUFF), "\nSystem Initiated!");
	UART_Transmit(BUFF, sizeof(BUFF));
	#endif

	uint8_t rx_buffer[256] =
 8000830:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	3304      	adds	r3, #4
 800083e:	22fc      	movs	r2, #252	@ 0xfc
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f97d 	bl	8000b42 <memset>
	{ 0 };

	uint8_t tx_buffer[256] =
 8000848:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800084c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	22fc      	movs	r2, #252	@ 0xfc
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f971 	bl	8000b42 <memset>
	{ 0 };

	uint16_t i = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c

	while (i < 256)
 8000866:	e00c      	b.n	8000882 <main+0x72>
	{
		tx_buffer[i] = 0xFF;		//Filling the buffer with 0xFF.
 8000868:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 800086c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000870:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8000874:	21ff      	movs	r1, #255	@ 0xff
 8000876:	54d1      	strb	r1, [r2, r3]
		i++;
 8000878:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 800087c:	3301      	adds	r3, #1
 800087e:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
	while (i < 256)
 8000882:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d9ee      	bls.n	8000868 <main+0x58>
	}

	for(uint8_t j=0;j<4;j++)
 800088a:	2300      	movs	r3, #0
 800088c:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
 8000890:	e013      	b.n	80008ba <main+0xaa>
	{
		EEPROM_Write(SLAVE_ADDRESS, (j * 0x100), tx_buffer, 256);		//Filling EEPROM with 0xFF from address 0 to 1023 to clear the old contents
 8000892:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000896:	b29b      	uxth	r3, r3
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 0208 	add.w	r2, r7, #8
 80008a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a4:	20a0      	movs	r0, #160	@ 0xa0
 80008a6:	f7ff fc63 	bl	8000170 <EEPROM_Write>
		Delay_ms(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f7ff fe9c 	bl	80005e8 <Delay_ms>
	for(uint8_t j=0;j<4;j++)
 80008b0:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80008b4:	3301      	adds	r3, #1
 80008b6:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
 80008ba:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d9e7      	bls.n	8000892 <main+0x82>
	}

	while (1)
	{
		char read_element = readBuffer(&rb);		//Reading data from Ring Buffer, the data is filled in ring buffer in UART1 Rx Interrupt.
 80008c2:	4830      	ldr	r0, [pc, #192]	@ (8000984 <main+0x174>)
 80008c4:	f000 f8e0 	bl	8000a88 <readBuffer>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80008d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80008d4:	701a      	strb	r2, [r3, #0]

		if(read_element != '\0')
 80008d6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80008da:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00c      	beq.n	80008fe <main+0xee>
		{
			EEPROM_Write(SLAVE_ADDRESS, eeprom_address++, (uint8_t*)&read_element, 1);		//Storing the byte into EEPROM fetched from Ring Buffer
 80008e4:	f8b7 120e 	ldrh.w	r1, [r7, #526]	@ 0x20e
 80008e8:	1c4b      	adds	r3, r1, #1
 80008ea:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	2301      	movs	r3, #1
 80008f2:	20a0      	movs	r0, #160	@ 0xa0
 80008f4:	f7ff fc3c 	bl	8000170 <EEPROM_Write>
			Delay_ms(10);		//10ms of delay is required after byte/page read/write from EEPROM
 80008f8:	200a      	movs	r0, #10
 80008fa:	f7ff fe75 	bl	80005e8 <Delay_ms>
		}

		if(eeprom_address >= 1009)		//Once the complete paragraph is received and simultaneously written into eeprom, processor starts PAGE reading the data from EEPROM.
 80008fe:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000902:	f5b3 7f7c 	cmp.w	r3, #1008	@ 0x3f0
 8000906:	d9dc      	bls.n	80008c2 <main+0xb2>
		{
			NVIC_DisableIRQ(USART1_IRQn);		//Disabling UART1 Rx Interrupt since the complete data has been received.
 8000908:	2025      	movs	r0, #37	@ 0x25
 800090a:	f7ff ff5d 	bl	80007c8 <__NVIC_DisableIRQ>

			for(uint8_t k=0;k<3;k++)
 800090e:	2300      	movs	r3, #0
 8000910:	f887 320a 	strb.w	r3, [r7, #522]	@ 0x20a
 8000914:	e01a      	b.n	800094c <main+0x13c>
			{
				EEPROM_Read(SLAVE_ADDRESS, (k * 0x100), rx_buffer, 256);		//Reading paragraph stored in the EEPROM by PAGE Read operation
 8000916:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 800091a:	b29b      	uxth	r3, r3
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b299      	uxth	r1, r3
 8000920:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000928:	20a0      	movs	r0, #160	@ 0xa0
 800092a:	f7ff fc47 	bl	80001bc <EEPROM_Read>
				Delay_ms(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f7ff fe5a 	bl	80005e8 <Delay_ms>
				UART_Transmit(rx_buffer, 256);
 8000934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000938:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff0b 	bl	8000758 <UART_Transmit>
			for(uint8_t k=0;k<3;k++)
 8000942:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 8000946:	3301      	adds	r3, #1
 8000948:	f887 320a 	strb.w	r3, [r7, #522]	@ 0x20a
 800094c:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 8000950:	2b02      	cmp	r3, #2
 8000952:	d9e0      	bls.n	8000916 <main+0x106>
			}

			EEPROM_Read(SLAVE_ADDRESS, 0x0300, rx_buffer, 256-13);		//Reading the last page.
 8000954:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000958:	23f3      	movs	r3, #243	@ 0xf3
 800095a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800095e:	20a0      	movs	r0, #160	@ 0xa0
 8000960:	f7ff fc2c 	bl	80001bc <EEPROM_Read>
			Delay_ms(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f7ff fe3f 	bl	80005e8 <Delay_ms>
			UART_Transmit(rx_buffer, 256-13);
 800096a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800096e:	21f3      	movs	r1, #243	@ 0xf3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <UART_Transmit>

			eeprom_address = 0;		//setting eeprom register/memory address to 0 to get ready to store the data again into eeprom from 0th address.
 8000976:	2300      	movs	r3, #0
 8000978:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

			NVIC_EnableIRQ(USART1_IRQn);		//Enabling UART1 Rx Interrupt to receive next paragraph of 1010 byte form PC.
 800097c:	2025      	movs	r0, #37	@ 0x25
 800097e:	f7ff ff07 	bl	8000790 <__NVIC_EnableIRQ>
	{
 8000982:	e79e      	b.n	80008c2 <main+0xb2>
 8000984:	20000024 	.word	0x20000024

08000988 <initBuffer>:
	while (1);
}

//Initializing Ring Buffer
void initBuffer(volatile RingBuffer *rb)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	rb->tail = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	rb->count = 0;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <isFull>:

//Checking if Ring Buffer is full
bool isFull(volatile RingBuffer *rb)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	return rb->count == BUFFER_SIZE;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 80009c0:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 80009c4:	4293      	cmp	r3, r2
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <isEmpty>:

//Checking if Ring Buffer is empty
bool isEmpty(volatile RingBuffer *rb)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	return rb->count == 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf0c      	ite	eq
 80009ea:	2301      	moveq	r3, #1
 80009ec:	2300      	movne	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <writeBuffer>:

//Wrinting one byte into Ring Buffer
void writeBuffer(volatile RingBuffer *rb, char c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	if(isFull(rb))
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffd2 	bl	80009b2 <isFull>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d013      	beq.n	8000a3c <writeBuffer+0x40>
	{
		rb->tail = (rb->tail + 1) % BUFFER_SIZE;    // Overwrite the oldest data
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <writeBuffer+0x88>)
 8000a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a22:	441a      	add	r2, r3
 8000a24:	1251      	asrs	r1, r2, #9
 8000a26:	17da      	asrs	r2, r3, #31
 8000a28:	1a8a      	subs	r2, r1, r2
 8000a2a:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000a2e:	fb01 f202 	mul.w	r2, r1, r2
 8000a32:	1a9a      	subs	r2, r3, r2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 8000a3a:	e006      	b.n	8000a4a <writeBuffer+0x4e>
	}
	else
	{
		rb->count++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	}

	rb->buffer[rb->head] = c;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	78f9      	ldrb	r1, [r7, #3]
 8000a54:	54d1      	strb	r1, [r2, r3]
	rb->head = (rb->head + 1) % BUFFER_SIZE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a09      	ldr	r2, [pc, #36]	@ (8000a84 <writeBuffer+0x88>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	441a      	add	r2, r3
 8000a66:	1251      	asrs	r1, r2, #9
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	1a8a      	subs	r2, r1, r2
 8000a6c:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000a70:	fb01 f202 	mul.w	r2, r1, r2
 8000a74:	1a9a      	subs	r2, r3, r2
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	81c635bd 	.word	0x81c635bd

08000a88 <readBuffer>:

//Returns one byte form Ring Buffer also deletes the read byte
char readBuffer(volatile RingBuffer *rb)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(isEmpty(rb))
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffa1 	bl	80009d8 <isEmpty>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <readBuffer+0x18>
	{
		return '\0';
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e020      	b.n	8000ae2 <readBuffer+0x5a>
	}
	char c = rb->buffer[rb->tail];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	5cd3      	ldrb	r3, [r2, r3]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	rb->tail = (rb->tail + 1) % BUFFER_SIZE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <readBuffer+0x64>)
 8000ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aba:	441a      	add	r2, r3
 8000abc:	1251      	asrs	r1, r2, #9
 8000abe:	17da      	asrs	r2, r3, #31
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000ac6:	fb01 f202 	mul.w	r2, r1, r2
 8000aca:	1a9a      	subs	r2, r3, r2
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	rb->count--;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

	return c;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	81c635bd 	.word	0x81c635bd

08000af0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	@ (8000b3c <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1e:	f000 f819 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fe75 	bl	8000810 <main>

08000b26 <LoopForever>:

LoopForever:
  b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
  ldr   r0, =_estack
 8000b28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b34:	08000bbc 	.word	0x08000bbc
  ldr r2, =_sbss
 8000b38:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b3c:	20000424 	.word	0x20000424

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>

08000b42 <memset>:
 8000b42:	4603      	mov	r3, r0
 8000b44:	4402      	add	r2, r0
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d100      	bne.n	8000b4c <memset+0xa>
 8000b4a:	4770      	bx	lr
 8000b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8000b50:	e7f9      	b.n	8000b46 <memset+0x4>
	...

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	2600      	movs	r6, #0
 8000b58:	4d0c      	ldr	r5, [pc, #48]	@ (8000b8c <__libc_init_array+0x38>)
 8000b5a:	4c0d      	ldr	r4, [pc, #52]	@ (8000b90 <__libc_init_array+0x3c>)
 8000b5c:	1b64      	subs	r4, r4, r5
 8000b5e:	10a4      	asrs	r4, r4, #2
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	f000 f81a 	bl	8000b9c <_init>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	4d0a      	ldr	r5, [pc, #40]	@ (8000b94 <__libc_init_array+0x40>)
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <__libc_init_array+0x44>)
 8000b6e:	1b64      	subs	r4, r4, r5
 8000b70:	10a4      	asrs	r4, r4, #2
 8000b72:	42a6      	cmp	r6, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7c:	4798      	blx	r3
 8000b7e:	3601      	adds	r6, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	4798      	blx	r3
 8000b88:	3601      	adds	r6, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	08000bb4 	.word	0x08000bb4
 8000b90:	08000bb4 	.word	0x08000bb4
 8000b94:	08000bb4 	.word	0x08000bb4
 8000b98:	08000bb8 	.word	0x08000bb8

08000b9c <_init>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	bf00      	nop
 8000ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba2:	bc08      	pop	{r3}
 8000ba4:	469e      	mov	lr, r3
 8000ba6:	4770      	bx	lr

08000ba8 <_fini>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr
